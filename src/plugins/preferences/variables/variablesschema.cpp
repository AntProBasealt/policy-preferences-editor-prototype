// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "variablesschema.h"

// Properties_t
// 

const Properties_t::ActionOptional& Properties_t::
action () const
{
  return this->action_;
}

Properties_t::ActionOptional& Properties_t::
action ()
{
  return this->action_;
}

void Properties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void Properties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void Properties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const Properties_t::NameType& Properties_t::
name () const
{
  return this->name_.get ();
}

Properties_t::NameType& Properties_t::
name ()
{
  return this->name_.get ();
}

void Properties_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Properties_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Properties_t::ValueType& Properties_t::
value () const
{
  return this->value_.get ();
}

Properties_t::ValueType& Properties_t::
value ()
{
  return this->value_.get ();
}

void Properties_t::
value (const ValueType& x)
{
  this->value_.set (x);
}

void Properties_t::
value (::std::unique_ptr< ValueType > x)
{
  this->value_.set (std::move (x));
}

const Properties_t::UserOptional& Properties_t::
user () const
{
  return this->user_;
}

Properties_t::UserOptional& Properties_t::
user ()
{
  return this->user_;
}

void Properties_t::
user (const UserType& x)
{
  this->user_.set (x);
}

void Properties_t::
user (const UserOptional& x)
{
  this->user_ = x;
}

const Properties_t::PartialOptional& Properties_t::
partial () const
{
  return this->partial_;
}

Properties_t::PartialOptional& Properties_t::
partial ()
{
  return this->partial_;
}

void Properties_t::
partial (const PartialType& x)
{
  this->partial_.set (x);
}

void Properties_t::
partial (const PartialOptional& x)
{
  this->partial_ = x;
}

const Properties_t::DisabledOptional& Properties_t::
disabled () const
{
  return this->disabled_;
}

Properties_t::DisabledOptional& Properties_t::
disabled ()
{
  return this->disabled_;
}

void Properties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Properties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// EnvironmentVariable_t
// 

const EnvironmentVariable_t::PropertiesSequence& EnvironmentVariable_t::
Properties () const
{
  return this->Properties_;
}

EnvironmentVariable_t::PropertiesSequence& EnvironmentVariable_t::
Properties ()
{
  return this->Properties_;
}

void EnvironmentVariable_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const EnvironmentVariable_t::ClsidType& EnvironmentVariable_t::
clsid () const
{
  return this->clsid_.get ();
}

EnvironmentVariable_t::ClsidType& EnvironmentVariable_t::
clsid ()
{
  return this->clsid_.get ();
}

void EnvironmentVariable_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void EnvironmentVariable_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const EnvironmentVariable_t::NameType& EnvironmentVariable_t::
name () const
{
  return this->name_.get ();
}

EnvironmentVariable_t::NameType& EnvironmentVariable_t::
name ()
{
  return this->name_.get ();
}

void EnvironmentVariable_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void EnvironmentVariable_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const EnvironmentVariable_t::ImageOptional& EnvironmentVariable_t::
image () const
{
  return this->image_;
}

EnvironmentVariable_t::ImageOptional& EnvironmentVariable_t::
image ()
{
  return this->image_;
}

void EnvironmentVariable_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void EnvironmentVariable_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const EnvironmentVariable_t::ChangedOptional& EnvironmentVariable_t::
changed () const
{
  return this->changed_;
}

EnvironmentVariable_t::ChangedOptional& EnvironmentVariable_t::
changed ()
{
  return this->changed_;
}

void EnvironmentVariable_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void EnvironmentVariable_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void EnvironmentVariable_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const EnvironmentVariable_t::UidType& EnvironmentVariable_t::
uid () const
{
  return this->uid_.get ();
}

EnvironmentVariable_t::UidType& EnvironmentVariable_t::
uid ()
{
  return this->uid_.get ();
}

void EnvironmentVariable_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void EnvironmentVariable_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const EnvironmentVariable_t::DescOptional& EnvironmentVariable_t::
desc () const
{
  return this->desc_;
}

EnvironmentVariable_t::DescOptional& EnvironmentVariable_t::
desc ()
{
  return this->desc_;
}

void EnvironmentVariable_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void EnvironmentVariable_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void EnvironmentVariable_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const EnvironmentVariable_t::BypassErrorsOptional& EnvironmentVariable_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

EnvironmentVariable_t::BypassErrorsOptional& EnvironmentVariable_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void EnvironmentVariable_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void EnvironmentVariable_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const EnvironmentVariable_t::UserContextOptional& EnvironmentVariable_t::
userContext () const
{
  return this->userContext_;
}

EnvironmentVariable_t::UserContextOptional& EnvironmentVariable_t::
userContext ()
{
  return this->userContext_;
}

void EnvironmentVariable_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void EnvironmentVariable_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const EnvironmentVariable_t::RemovePolicyOptional& EnvironmentVariable_t::
removePolicy () const
{
  return this->removePolicy_;
}

EnvironmentVariable_t::RemovePolicyOptional& EnvironmentVariable_t::
removePolicy ()
{
  return this->removePolicy_;
}

void EnvironmentVariable_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void EnvironmentVariable_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// EnvironmentVariables
// 

const EnvironmentVariables::EnvironmentVariableSequence& EnvironmentVariables::
EnvironmentVariable () const
{
  return this->EnvironmentVariable_;
}

EnvironmentVariables::EnvironmentVariableSequence& EnvironmentVariables::
EnvironmentVariable ()
{
  return this->EnvironmentVariable_;
}

void EnvironmentVariables::
EnvironmentVariable (const EnvironmentVariableSequence& s)
{
  this->EnvironmentVariable_ = s;
}

const EnvironmentVariables::ClsidType& EnvironmentVariables::
clsid () const
{
  return this->clsid_.get ();
}

EnvironmentVariables::ClsidType& EnvironmentVariables::
clsid ()
{
  return this->clsid_.get ();
}

void EnvironmentVariables::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void EnvironmentVariables::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const EnvironmentVariables::DisabledOptional& EnvironmentVariables::
disabled () const
{
  return this->disabled_;
}

EnvironmentVariables::DisabledOptional& EnvironmentVariables::
disabled ()
{
  return this->disabled_;
}

void EnvironmentVariables::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void EnvironmentVariables::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// Properties_t
//

Properties_t::
Properties_t (const NameType& name,
              const ValueType& value)
: ::xml_schema::Type (),
  action_ (this),
  name_ (name, this),
  value_ (value, this),
  user_ (this),
  partial_ (this),
  disabled_ (this)
{
}

Properties_t::
Properties_t (const Properties_t& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  name_ (x.name_, f, this),
  value_ (x.value_, f, this),
  user_ (x.user_, f, this),
  partial_ (x.partial_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Properties_t::
Properties_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  name_ (this),
  value_ (this),
  user_ (this),
  partial_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Properties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (ValueTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "user" && n.namespace_ ().empty ())
    {
      this->user_.set (UserTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "partial" && n.namespace_ ().empty ())
    {
      this->partial_.set (PartialTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "value",
      "");
  }
}

Properties_t* Properties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Properties_t (*this, f, c);
}

Properties_t& Properties_t::
operator= (const Properties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->name_ = x.name_;
    this->value_ = x.value_;
    this->user_ = x.user_;
    this->partial_ = x.partial_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Properties_t::
~Properties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Properties_t >
_xsd_Properties_t_type_factory_init (
  "Properties_t",
  "");

// EnvironmentVariable_t
//

EnvironmentVariable_t::
EnvironmentVariable_t (const ClsidType& clsid,
                       const NameType& name,
                       const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

EnvironmentVariable_t::
EnvironmentVariable_t (const EnvironmentVariable_t& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

EnvironmentVariable_t::
EnvironmentVariable_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void EnvironmentVariable_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

EnvironmentVariable_t* EnvironmentVariable_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class EnvironmentVariable_t (*this, f, c);
}

EnvironmentVariable_t& EnvironmentVariable_t::
operator= (const EnvironmentVariable_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

EnvironmentVariable_t::
~EnvironmentVariable_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, EnvironmentVariable_t >
_xsd_EnvironmentVariable_t_type_factory_init (
  "EnvironmentVariable_t",
  "");

// EnvironmentVariables
//

EnvironmentVariables::
EnvironmentVariables (const ClsidType& clsid)
: ::xml_schema::Type (),
  EnvironmentVariable_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

EnvironmentVariables::
EnvironmentVariables (const EnvironmentVariables& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  EnvironmentVariable_ (x.EnvironmentVariable_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

EnvironmentVariables::
EnvironmentVariables (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  EnvironmentVariable_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void EnvironmentVariables::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // EnvironmentVariable
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "EnvironmentVariable",
          "",
          &::xsd::cxx::tree::factory_impl< EnvironmentVariableType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< EnvironmentVariableType > r (
          dynamic_cast< EnvironmentVariableType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->EnvironmentVariable_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

EnvironmentVariables* EnvironmentVariables::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class EnvironmentVariables (*this, f, c);
}

EnvironmentVariables& EnvironmentVariables::
operator= (const EnvironmentVariables& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->EnvironmentVariable_ = x.EnvironmentVariable_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

EnvironmentVariables::
~EnvironmentVariables ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const Properties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "name: " << i.name ();
  o << ::std::endl << "value: " << i.value ();
  if (i.user ())
  {
    o << ::std::endl << "user: " << *i.user ();
  }

  if (i.partial ())
  {
    o << ::std::endl << "partial: " << *i.partial ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Properties_t >
_xsd_Properties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const EnvironmentVariable_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (EnvironmentVariable_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, EnvironmentVariable_t >
_xsd_EnvironmentVariable_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const EnvironmentVariables& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (EnvironmentVariables::EnvironmentVariableConstIterator
         b (i.EnvironmentVariable ().begin ()), e (i.EnvironmentVariable ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "EnvironmentVariable: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::EnvironmentVariables > (
    ::EnvironmentVariables_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::EnvironmentVariables > (
    ::EnvironmentVariables_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::EnvironmentVariables > (
    ::EnvironmentVariables_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::EnvironmentVariables_ (isrc, f, p);
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::EnvironmentVariables_ (isrc, h, f, p);
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::EnvironmentVariables_ (isrc, h, f, p);
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::EnvironmentVariables_ (isrc, f, p);
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::EnvironmentVariables_ (isrc, h, f, p);
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::EnvironmentVariables_ (isrc, h, f, p);
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::EnvironmentVariables > (
    ::EnvironmentVariables_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::EnvironmentVariables > (
    ::EnvironmentVariables_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::EnvironmentVariables > (
    ::EnvironmentVariables_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::EnvironmentVariables > (
      ::EnvironmentVariables_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "EnvironmentVariables" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::EnvironmentVariables > r (
      ::xsd::cxx::tree::traits< ::EnvironmentVariables, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "EnvironmentVariables",
    "");
}

::std::unique_ptr< ::EnvironmentVariables >
EnvironmentVariables_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "EnvironmentVariables" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::EnvironmentVariables > r (
      ::xsd::cxx::tree::traits< ::EnvironmentVariables, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "EnvironmentVariables",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

